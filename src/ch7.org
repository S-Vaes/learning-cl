#+TITLE: Applicative Programming

#+begin_src lisp
(funcall #'cons 'a 'b)

(setf fn #'cons)

fn

(type-of fn)

(funcall fn 'c 'd)

(defun square (n) (* n n))
(square 3)

(mapcar #'square '(1 2 3 4 5))

(setf words
      '((one un)
        (two deux)
        (three trois)
        (four quatre)
        (five cinq)))

(mapcar #'first words)
(mapcar #'second words)
(mapcar #'reverse words)

(defun translate (x)
  (second (assoc x words)))
(mapcar #'translate '(three one four one five))

(defun add1 (x)
  (+ x 1))
(add1 2)
(mapcar #'add1 '(13 5 7 9))

(setf daily-planet
      '((olsen jimmy 1 cub-reporter)
        (kent clark 2 reporter)
        (lane lois 3 reporter)
        (white perry 4 editor)))
(mapcar #'third daily-planet)

(mapcar #'zerop '(2 0 3 4 0 -5 -6))
(defun greater-than-5-p (x)
  (> x 5))
(mapcar #'greater-than-5-p '(2 0 3 4 0 -5 -6))

(mapcar #'(lambda (n) (* n n)) '(1 2 3 4 5))
(mapcar #'(lambda (n) (* n 10)) '(1 2 3 4 5))

(mapcar #'(lambda (x) (list 'hi 'there x))
        '(joe fred wanda))
(defun niller (x) (lambda (x) (cond ((equal x t) t)
                                    ((nilp x) t)
                                    (t nil)))
  x)
(niller nil)

(defun flipper (xs)
  (mapcar #'(lambda (x) (cond ((equal x 'up) 'down)
                              ((equal x 'down) 'up)))
          xs))
(flipper '(up down up down))

(find-if #'oddp '(2 4 5 6 7 8))

(defun my-assoc (key table)
  (find-if #'(lambda (entry)
               (equal key (first entry)))
           table))

(my-assoc 'two words)

(defun between (x k)
  (find-if #'(lambda (num)
               (and (> k (- num 10))
                    (< k (+ num 10))))
           x))
(between '(110 130 150) 115)

(defun find-nested (xs)
  (find-if #'(lambda (elem) (not (listp elem))) xs))

(find-nested '('(1 2) 22 '(3 4) 5))

(setf note-table
      '((c 1)
        (c-sharp 2)
        (d 3)
        (d-sharp 4)
        (e 5)
        (f 6)
        (f-sharp 7)
        (g 8)
        (g-sharp 9)
        (a 10)
        (a-sharp 11)
        (b 12)))

(defun numbers (xs)
  (mapcar #'(lambda (x) (second (assoc x note-table))) xs))
(numbers '(e d c e e e e))

(defun find-note-by-num (num)
  (first (find-if #'(lambda (elem) (equal (second elem) num)) note-table)))
(find-note-by-num 13)
(defun notes (xs)
  (mapcar #'find-note-by-num xs))
(notes '(1 3 5))

(notes (numbers '(c d e f g a)))

(defun raise (num xs)
  (mapcar #'(lambda (elem) (+ elem num)) xs))
(raise 5 '(5 3 1 3 5 5 11))

(defun normalize (xs)
  (mapcar #'(lambda (elem) (mod elem 12)) xs))
(normalize '(6 10 13))

(defun transpose (step xs)
  (notes (normalize (raise step (numbers xs)))))
(transpose -1 '(e d c d e e e))

(defun get-between-one-and-five (xs)
  (remove-if-not #'(lambda (elem) (and (> elem 1) (< elem 5))) xs))
(get-between-one-and-five '(1 0 6 1 2 31 4 3))

(defun count-the (xs)
  (length (remove-if-not #'(lambda (elem) (equal 'the elem)) xs)))

(count-the '(the mayor of the village))

(defun get-two-len-lists (xs)
  (remove-if-not #'(lambda (elem) (= (length elem) 2)) xs))
(get-two-len-lists '((list one one) (list two)))

(defun my-intersection (list1 list2)
  (remove-if-not (lambda (item) 
                   (find item list2))
                 list1))
(my-intersection '(a b c d e f g) '(f g h i j k l m n))

(defun my-union (list1 list2)
  (append list1
          (remove-if (lambda (item)
                       (find item list1))
                     list2)))
(my-union '(a b c d e f g) '(f g h i j k l m n))

(defun rank (card)
  (first card))
(defun suit (card)
  (second card))

(setf hand '((3 hearts)
             (5 clubs)
             (2 diamonds)
             (4 diamonds)
             (ace spades)))

(defun count-suit (suit cards)
  (length (remove-if-not #'(lambda (card)
                             (equal suit (suit card)))
                         cards)))
(count-suit 'diamonds hand)

(setf colors '((clubs black)
               (diamonds red)
               (hearts red)
               (spades black)))
(defun color-of (card)
  (second (assoc (second card) colors)))
(color-of '(2 clubs))

(defun first-red (hand)
  (find-if #'(lambda (card) (equal (color-of card) 'red)) hand))
(first-red hand)
(defun black-cards (hand)
  (remove-if-not #'(lambda (card) (equal (color-of card) 'black)) hand))
(black-cards hand)

(defun what-ranks (insuit hand)
  (mapcar #'first
          (remove-if-not #'(lambda (card)
                             (equal (suit card) insuit))
                         hand)))
(what-ranks 'diamonds hand)

(setf all-ranks '(2 3 4 5 6 7 8 9 10 jack queen king ace))
(defun higher-rank-p (card1 card2)
  (equal card2 (first (member card2 (member card1 all-ranks)))))
(higher-rank-p 'queen 'jack)

(defun high-card (hand) 
  (let ((highest-rank 
          (find-if (lambda (rank) 
                     (assoc rank hand))
                   (reverse all-ranks))))
    (assoc highest-rank hand)))

(high-card hand)

(reduce '+ '(1 2 3))
(reduce 'append '((one un) (two deux) (three trois)))

(defun total-len (lists)
  (length (reduce 'append lists)))
(total-len '((a b c) (d e f) (g h i)))

(defun all-odd (list)
  (every 'oddp list))
(all-odd '(1 3 5 8 9))

(defun none-odd (list)
  (every 'evenp list))

(setf database
      '((b1 shape brick)
        (b1 color green)
        (b1 size small)
        (b1 supported-by b2)
        (b1 supported-by b3)
        (b2 shape brick)
        (b2 color red)
        (b2 size small)
        (b2 supports b1)
        (b2 left-of b3)
        (b3 color red)
        (b3 size small)
        (b3 supports b1)
        (b3 right-of b2)
        (b4 shape pyramid)
        (b4 color blue)
        (b4 size large)
        (b4 supported-by b5)
        (b5 shape cube)
        (b5 color green)
        (b5 size large)
        (b5 supports b4)
        (b6 shape brick)
        (b6 color purple)
        (b6 size large)))

;; Match Element Function
(defun match-element (pattern assertion)
  "Check if two elements match, with '?' as a wildcard."
  (or (eq pattern assertion)  ; Exact match
      (eq pattern '?)               ; Wildcard match
      ))

;; Match Triple Function
(defun match-triple (pattern assertion)
  (and (= (length pattern) (length assertion))
       (every 'match-element pattern assertion)))

;; Fetch Function
(defun fetch (pattern)
  (remove-if-not (lambda (assertion) (match-triple pattern assertion)) database))

(fetch '(b2 color ?))
(fetch '(b4 shape ?))

(defun get-color-pattern (block-name)
  `(,block-name color ?))
(get-color-pattern 'b4)

(defun supporters (block-name)
  (mapcar 'first (fetch `(? supports ,block-name))))
(supporters 'b1)

(mapcar (lambda (x y) (list x 'gets y))
        '(fred wilma george diane)
        '(job1 job2 job3 job4))

(mapcar '+ '(1 2 3 4 5) '(60 70 80 90 100))

;; #' is the function special function
'cons
#'cons
#'(lambda (x) (+ x 2))

(setf g #'(lambda (x) (* x 10)))
(funcall g 12)

(find-if 'oddp '(2 3 4 5 6))
(find-if 'oddp '(2 3 4 5 6) :from-end t)

(defun inalienable-rights (fn)
  (funcall fn
           '(life liberty and the pursuit of happiness)))
(inalienable-rights #'length)
(inalienable-rights #'reverse)

(defun make-greater-than-predicate (n)
  #'(lambda (x) (> x n)))
(setf pred (make-greater-than-predicate 3))
(funcall pred 2)
(funcall pred 5)
(find-if pred '(2 3 4 5 6 7 8))  
#+end_src
